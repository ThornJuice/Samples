package com.hzy.greendao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzy.greendao.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_city".
*/
public class CityDao extends AbstractDao<City, Void> {

    public static final String TABLENAME = "tb_city";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cityid = new Property(0, Integer.class, "cityid", false, "CITYID");
        public final static Property Cityname = new Property(1, String.class, "cityname", false, "CITYNAME");
        public final static Property Zipcode = new Property(2, String.class, "zipcode", false, "ZIPCODE");
        public final static Property Provinceid = new Property(3, Integer.class, "provinceid", false, "PROVINCEID");
        public final static Property Datecreated = new Property(4, Long.class, "datecreated", false, "DATECREATED");
        public final static Property Dateupdated = new Property(5, Long.class, "dateupdated", false, "DATEUPDATED");
        public final static Property Citycode = new Property(6, String.class, "citycode", false, "CITYCODE");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        Integer cityid = entity.getCityid();
        if (cityid != null) {
            stmt.bindLong(1, cityid);
        }
 
        String cityname = entity.getCityname();
        if (cityname != null) {
            stmt.bindString(2, cityname);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(3, zipcode);
        }
 
        Integer provinceid = entity.getProvinceid();
        if (provinceid != null) {
            stmt.bindLong(4, provinceid);
        }
 
        Long datecreated = entity.getDatecreated();
        if (datecreated != null) {
            stmt.bindLong(5, datecreated);
        }
 
        Long dateupdated = entity.getDateupdated();
        if (dateupdated != null) {
            stmt.bindLong(6, dateupdated);
        }
 
        String citycode = entity.getCitycode();
        if (citycode != null) {
            stmt.bindString(7, citycode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        Integer cityid = entity.getCityid();
        if (cityid != null) {
            stmt.bindLong(1, cityid);
        }
 
        String cityname = entity.getCityname();
        if (cityname != null) {
            stmt.bindString(2, cityname);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(3, zipcode);
        }
 
        Integer provinceid = entity.getProvinceid();
        if (provinceid != null) {
            stmt.bindLong(4, provinceid);
        }
 
        Long datecreated = entity.getDatecreated();
        if (datecreated != null) {
            stmt.bindLong(5, datecreated);
        }
 
        Long dateupdated = entity.getDateupdated();
        if (dateupdated != null) {
            stmt.bindLong(6, dateupdated);
        }
 
        String citycode = entity.getCitycode();
        if (citycode != null) {
            stmt.bindString(7, citycode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // cityid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zipcode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // provinceid
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // datecreated
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // dateupdated
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // citycode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCityid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCityname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZipcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvinceid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDatecreated(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDateupdated(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCitycode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(City entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(City entity) {
        return null;
    }

    @Override
    public boolean hasKey(City entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
